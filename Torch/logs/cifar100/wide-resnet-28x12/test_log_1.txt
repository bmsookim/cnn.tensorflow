=> Loading checkpoint /home/bumsoo/Github/ImageRecognition/Torch/modelState/cifar100/wide-resnet-28x12/best.t7	
=> Resuming model from /home/bumsoo/Github/ImageRecognition/Torch/modelState/cifar100/wide-resnet-28x12/model_194.t7	
Skipping memory optimization. Network is already optimized for training mode.	
warning: could not load nccl, falling back to default communication	
DataParallelTable: 2 x nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): nn.SpatialBatchNormalization (4D) (16)
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 192, 3x3, 1,1, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (192)
          |      (3): cudnn.ReLU
          |      (4): nn.Dropout(0.300000)
          |      (5): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): cudnn.SpatialConvolution(16 -> 192, 1x1) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (192)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (192)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (192)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (192)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (192)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (192)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(192 -> 192, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): nn.SpatialBatchNormalization (4D) (192)
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialConvolution(192 -> 384, 3x3, 2,2, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (384)
          |      (3): cudnn.ReLU
          |      (4): nn.Dropout(0.300000)
          |      (5): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): cudnn.SpatialConvolution(192 -> 384, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (384)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (384)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (384)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (384)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (384)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (384)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(384 -> 384, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): nn.SpatialBatchNormalization (4D) (384)
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          |      (1): cudnn.SpatialConvolution(384 -> 768, 3x3, 2,2, 1,1) without bias
          |      (2): nn.SpatialBatchNormalization (4D) (768)
          |      (3): cudnn.ReLU
          |      (4): nn.Dropout(0.300000)
          |      (5): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): cudnn.SpatialConvolution(384 -> 768, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (768)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (768)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (768)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (768)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): nn.SpatialBatchNormalization (4D) (768)
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |      (4): nn.SpatialBatchNormalization (4D) (768)
          |      (5): cudnn.ReLU
          |      (6): nn.Dropout(0.300000)
          |      (7): cudnn.SpatialConvolution(768 -> 768, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): nn.SpatialBatchNormalization (4D) (768)
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(768)
  (9): nn.Linear(768 -> 100)
}
 * Results Top1: 81.670  Top5:  95.43%	
